```yaml
name: CI/CD for task-manager-dna-media

on:
  push:
    branches:
      - main
    # Optionnel: Spécifier les branches à exclure
    # exclude:
    #  - 'release/*'
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up PHP
        uses: shimataro/action-php@v2
        with:
          php-version: '8.1' # Choisir la version PHP souhaitée
          tools: composer

      - name: Install dependencies
        run: composer install --no-interaction --optimize-autoloader

      - name: Run tests
        run: ./vendor/bin/phpunit  # Adapter à votre commande de test

      - name: Build Docker image
        run: docker build -t task-manager-dna-media:latest .

      - name: Login to Docker Registry (si nécessaire)
        uses: docker/login-action@v2
        with:
          registry: docker.io # ou votre registre Docker privé
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image
        run: docker push task-manager-dna-media:latest

      - name: Deploy to Production (sur branche main uniquement)
        if: github.ref == 'refs/heads/main'
        run: |
          # Votre script de déploiement ici.  Exemple avec docker compose:
          # docker compose up -d --build  (adapter à votre infrastructure)
          echo "Déploiement sur production..."
          #  ...vos instructions de déploiement...

  # Job optionnel pour les tests avec une autre version de PHP si besoin
  #build-php80:
  #  runs-on: ubuntu-latest
  #  steps:
  #    - ... (même structure que le job build, en changeant la version PHP)

  # Job optionnel pour Node.js (si applicable)
  #node-test:
  #  runs-on: ubuntu-latest
  #  steps:
  #    - name: Checkout code
  #      uses: actions/checkout@v3
  #    - name: Use Node.js 16
  #      uses: actions/setup-node@v3
  #      with:
  #        node-version: 16
  #    - name: Install Node.js dependencies
  #      run: npm install
  #    - name: Run Node.js tests
  #      run: npm test


  # Job optionnel pour Python (si applicable)
  #python-test:
  #  runs-on: ubuntu-latest
  #  steps:
  #    - name: Checkout code
  #      uses: actions/checkout@v3
  #    - name: Set up Python 3.9
  #      uses: actions/setup-python@v3
  #      with:
  #        python-version: 3.9
  #    - name: Install Python dependencies
  #      run: pip install -r requirements.txt
  #    - name: Run Python tests
  #      run: pytest


# Notification Slack (exemple)
  notify_slack:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ failure() }}
    steps:
      - name: Send Slack notification
        uses: slackapi/slack-github-action@v2
        with:
          slack_token: ${{ secrets.SLACK_BOT_TOKEN }}
          channel: '#your-slack-channel'
          message: "Build failed for task-manager-dna-media. Check the logs for details."

```

**Avant d'utiliser ce workflow:**

* **Remplacez les placeholders:**  Adaptez les commandes `composer install`, `phpunit`, le script de déploiement, et les identifiants Docker et Slack à votre projet.
* **Secrets GitHub:** Créez les secrets GitHub suivants dans les paramètres de votre repository: `DOCKER_USERNAME`, `DOCKER_PASSWORD`, `SLACK_BOT_TOKEN` (optionnel).
* **Dockerfile:** Assurez-vous que vous avez un fichier `Dockerfile` dans la racine de votre projet.
* **Tests:**  Ce workflow suppose que vous avez des tests unitaires configurables avec `phpunit`. Adaptez les sections pour Node.js et Python si nécessaire.
* **Déploiement:**  La section de déploiement est un exemple très basique.  Vous devrez l'adapter à votre infrastructure de déploiement (ex: Kubernetes, serveur distant, etc.).


Ce workflow fournit une base solide.  Vous pouvez l'étendre avec des étapes supplémentaires comme l'analyse de code statique, la couverture de code, etc.  N'oubliez pas de bien documenter chaque étape pour une meilleure compréhension.
